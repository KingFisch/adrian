{%- comment -%}
  <gem-script-version>20220505-1</gem-script-version>

  WARNING: This file is system-generated by GemPages and should not be modified manually.
{%- endcomment -%}
<script data-author="gempages" type="text/javascript">
  function setCookie(name, value, days, path) {
    var expires = "";
    if (days) {
      var date = new Date();
      date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
      expires = "; expires=" + date.toUTCString();
    }
    if (!path){
      path = "/";
    }
    document.cookie = name + "=" + (value || "") + expires + "; path=" + path;
  }

  function getCookie(name) {
    var nameEQ = name + "=";
    var ca = document.cookie.split(";");
    for (var i = 0; i < ca.length; i++) {
      var c = ca[i];
      while (c.charAt(0) == " ") c = c.substring(1, c.length);
      if (c.indexOf(nameEQ) == 0)
        return c.substring(nameEQ.length, c.length);
    }
    return null;
  }

  function setStyle(url) {
    const linkTag = document.createElement("link");
    linkTag.setAttribute("rel", "stylesheet");
    linkTag.setAttribute("type", "text/css");
    linkTag.setAttribute("href", url);
    document.getElementsByTagName("body")[0].appendChild(linkTag);
  }

  const pageIDs = [];
  pageIDs.push(TEMPLATE_A);
  pageIDs.push(TEMPLATE_B);

  let currentState = parseInt(getCookie(`gem-product-state-${CAMPAIGN_ID}-${CAMPAIGN_STARTED_AT}`));
  if (!pageIDs.includes(currentState)) {
    const rand = Math.random();
    currentState = rand <= CAMPAIGN_RATE ? TEMPLATE_A : TEMPLATE_B
    setCookie(`gem-product-state-${CAMPAIGN_ID}-${CAMPAIGN_STARTED_AT}`, `${currentState}`, `${CAMPAIGN_DURATION}`);
  }

  const gfTemplate = document.querySelector(`#g_${currentState}`);
  document.querySelector('#gf_body_ab_testing').innerHTML = gfTemplate.innerHTML;

  var pageLibs = eval(`pageLibs_${currentState}`);
  setStyle(eval(`cssUrl_${currentState}`));
  eval(`cssLibs_${currentState}`).forEach((lib) => setStyle(lib));

  var divBody = document.getElementById("gf_body_ab_testing");
  var scriptTags = divBody.getElementsByTagName("script");
  for (let i = 0; i < scriptTags.length; i++) {
    var jsCode;
    jsCode = scriptTags[i].innerText;
    try {
      if (!jsCode && scriptTags[i]['src']) {
        var s = document.createElement( 'script' );
        s.setAttribute( 'src', scriptTags[i]['src'] );
        document.body.appendChild( s );
      }
      else {
        eval(jsCode);
      }
    } catch (e){}
  }

  // return ?variantId=xx&campiagn&campaignId=yyy
  const searchParams = function () {
    const href = window.location.href;
    const hasParams = href.indexOf('?');
    abTestingParams = `variantId=${currentState}&campaignId=${CAMPAIGN_ID}`
    if (hasParams === -1) {
      return "?" + abTestingParams;
    }
    return "&" + abTestingParams;
  }

  function checkIfAnalyticsLoaded(callback) {
    if (window.ga && getCookie(`gem-product-state-${CAMPAIGN_ID}-${CAMPAIGN_STARTED_AT}`)) {
      if(callback && typeof callback == "function") {
        callback();
      }

      window.ga("send", "event", {
        eventCategory: "GemPagesABTesting",
        eventAction: `pageView_${CAMPAIGN_ID}_${currentState}`,
        nonInteraction: true,
      });

      forms = document.getElementsByTagName("form");
      Array.from(forms).forEach((form) => {
        if (form.getAttribute("action") !== "/cart/add") {
          return;
        }
        addToCardBtns = form.getElementsByClassName("gf_add-to-cart");
        if (addToCardBtns.length == 0) {
          buttons = form.getElementsByTagName("button");
          Array.from(buttons).forEach((btn) => {
            if (btn.getAttribute("type") !== "submit") {
              return;
            }
            btn.addEventListener("click", function () {
              window.ga("send", "event", {
                eventCategory: "GemPagesABTesting",
                eventAction: `addToCart_${CAMPAIGN_ID}_${currentState}`,
                nonInteraction: true,
              })
            })
          });
        } else {
          Array.from(addToCardBtns).forEach((btn) => {
            btn.addEventListener("click", function () {
              window.ga("send", "event", {
                eventCategory: "GemPagesABTesting",
                eventAction: `addToCart_${CAMPAIGN_ID}_${currentState}`,
                nonInteraction: true,
              })
            })
          });
        }
      });
    } else {
      // Retry. Probably want to cap the total number of times you call this.
      setTimeout(() => checkIfAnalyticsLoaded(callback), 500);
    }
  }

  function checkIfTrekkieLoaded(callback) {
    if (window.trekkie) {
      if(callback && typeof callback == "function") {
        callback();
      }
    } else {
      // Retry. Probably want to cap the total number of times you call this.
      setTimeout(() => checkIfTrekkieLoaded(callback), 500);
    }
  }

  var gemTrekkie = function() {
    trekkie.ready(function () {
      window.trekkie.url = function () {
        const href = window.location.href;
        return href + searchParams();
      };
      const oldPageObject = window.trekkie.generatePageObject();
      // override this function to send custom data to google analytics
      window.trekkie.generatePageObject = function () {
        if (!oldPageObject.search.includes(searchParams())) {
          oldPageObject.search = queryParams();
          oldPageObject.path = pathWithoutParams();
          oldPageObject.title = pageTitle();
          oldPageObject.url = fullURL();
        }
        return oldPageObject;
      };
      window.trekkie.pageDefaults = function () {
        var n = window.location.href,
          i = n.indexOf("?");
        return (
          (n =
            "?" ===
            (n =
              -1 === (i = (n = -1 === i ? "" : n.slice(i)).indexOf("#"))
                ? n
                : n.slice(0, i))
              ? ""
              : n),
          {
            path: pathWithoutParams(),
            referrer: document.referrer,
            search: queryParams(),
            title: pageTitle(),
            url: fullURL(),
            properties: {},
          }
        );
      };
      function pathWithoutParams() {
        return document.location.pathname;
      }
      function pageTitle() {
        return document.title;
      }
      function queryParams() {
        return window.location.search + searchParams();
      }
      function fullURL() {
        return window.location.href + searchParams();
      }
      function u() {
        var n = fullURL();
        var i = (function () {
          var n = pathWithoutParams();
          if (n) {
            var i = queryParams();
            return i ? n + i : n;
          }
          return null;
        })();
        var t = pageTitle();
        n && window.ga("set", "location", n);
        i && window.ga("set", "page", i);
        t && window.ga("set", "title", t);
        window.ga("send", "pageview", { sessionControl: "start" });
      }
      checkIfAnalyticsLoaded(u);
      // send data to google analytics
      window.trekkie.page.call(window.trekkie);
    });
  }

  checkIfTrekkieLoaded(gemTrekkie);
</script>
